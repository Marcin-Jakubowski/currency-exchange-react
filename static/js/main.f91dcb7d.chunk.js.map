{"version":3,"sources":["Form/index.js","Header/index.js","Section/index.js","Container/index.js","DateBox/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","calculateResult","currencies","useState","amount","setAmount","currentCurrency","setCurrentCurrency","expectedCurrency","setExpectedCurrency","generateOptions","map","name","value","key","className","onSubmit","event","preventDefault","required","type","step","min","max","autoFocus","onChange","target","Header","body","Section","finalResult","Container","children","DateBox","currentDate","setCurrentDate","useEffect","intervalId","setInterval","myDate","Date","toLocaleDateString","weekday","day","month","year","hour","minute","second","clearInterval","App","setFinalResult","expectedCurrencyName","find","currency","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f91dcb7d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ calculateResult, currencies }) => {\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [currentCurrency, setCurrentCurrency] = useState(\"\");\r\n    const [expectedCurrency, setExpectedCurrency] = useState(\"\");\r\n\r\n    const generateOptions = currencies.map(({ name, value }) => {\r\n        return <option key={name} value={value}>{name}</option>\r\n    });\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        calculateResult(+amount, +currentCurrency, +expectedCurrency);\r\n        setAmount(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <fieldset className=\"form__fieldset\">\r\n                <legend className=\"form__legend\">Wypełnij dane:</legend>\r\n                <label className=\"form__label\">\r\n                    <span className=\"form__text\">Podaj kwotę: </span>\r\n                    <input\r\n                        value={amount}\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"0.01\"\r\n                        min=\"5\"\r\n                        max=\"10000000\"\r\n                        autoFocus\r\n                        onChange={({ target }) => setAmount(target.value)}\r\n                    />\r\n                </label>\r\n                <label className=\"form__label\">\r\n                    <span className=\"form__text\">Podaj walutę początkową: </span>\r\n                    <select\r\n                        onChange={({ target }) => setCurrentCurrency(target.value)}\r\n                        value={currentCurrency}\r\n                    >\r\n                        <option></option>\r\n                        {generateOptions}\r\n                    </select>\r\n                </label>\r\n                <label className=\"form__label\">\r\n                    <span className=\"form__text\">Podaj walutę końcową: </span>\r\n                    <select\r\n                        onChange={({ target }) => setExpectedCurrency(target.value)}\r\n                        value={expectedCurrency}\r\n                    >\r\n                        <option></option>\r\n                        {generateOptions}\r\n                    </select>\r\n                </label>\r\n                <button className=\"form__button\">Przelicz</button>\r\n            </fieldset>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ body }) => (\r\n    <div className=\"header\">\r\n        {body}\r\n        <h1 className=\"header__paragraph\">Kantor wymiany walut</h1>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ body, finalResult }) => (\r\n    <div className=\"section\">\r\n        {body}\r\n        <p className=\"section__paragraph\">\r\n            Otrzymasz: <strong>{finalResult}</strong>\r\n        </p>\r\n    </div>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst DateBox = () => {\r\n    const [currentDate, setCurrentDate] = useState();\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            const myDate = new Date().toLocaleDateString(\"pl\", {\r\n                weekday: \"long\",\r\n                day: \"numeric\",\r\n                month: \"long\",\r\n                year: \"numeric\",\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: \"numeric\",\r\n            });\r\n            setCurrentDate(myDate);\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return (<p className=\"dateBox\">Dzisiaj jest {currentDate}</p>);\r\n};\r\n\r\nexport default DateBox;\r\n","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport Header from \"./Header\";\nimport Section from \"./Section\";\nimport Container from \"./Container\";\nimport DateBox from './DateBox';\n\nfunction App() {\n  const [finalResult, setFinalResult] = useState(\"\");\n\n  const currencies = [\n    { name: \"PLN\", value: 1 },\n    { name: \"EUR\", value: 4.4771 },\n    { name: \"USD\", value: 3.9177 },\n  ];\n\n  const calculateResult = (amount, currentCurrency, expectedCurrency) => {\n    const expectedCurrencyName = currencies.find(currency =>\n      currency.value === expectedCurrency).name;\n    setFinalResult(\n      `${(amount * currentCurrency / expectedCurrency).toFixed(2)} ${expectedCurrencyName}`\n    );\n  };\n\n  return (\n    <Container>\n      <Header\n        body = {<DateBox />}\n      />\n      <Section\n        finalResult={finalResult}\n        body={\n          <Form\n            calculateResult={calculateResult}\n            currencies={currencies}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}