{"version":3,"sources":["Form/index.js","Header/index.js","Section/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","calculateResult","useState","amount","setAmount","actualCurrency","setActualCurrency","expectedCurrency","setExpectedCurrency","className","onSubmit","event","preventDefault","value","required","type","step","min","max","autoFocus","onChange","target","Header","Section","body","finalResult","toFixed","Container","children","App","setFinalResult","PLNAmount","expectedAmount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUA6DeA,G,MA1DF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAAsB,EACNC,mBAAS,IADH,mBAC3BC,EAD2B,KACnBC,EADmB,OAEUF,mBAAS,IAFnB,mBAE3BG,EAF2B,KAEXC,EAFW,OAGcJ,mBAAS,IAHvB,mBAG3BK,EAH2B,KAGTC,EAHS,KAUlC,OACI,0BAAMC,UAAU,OAAOC,SAPN,SAACC,GAClBA,EAAMC,iBACNX,GAAiBE,EAAQE,EAAgBE,GACzCH,EAAU,MAKN,8BAAUK,UAAU,kBAChB,4BAAQA,UAAU,gBAAlB,uBACA,2BAAOA,UAAU,eACb,0BAAMA,UAAU,cAAhB,sBACA,2BACII,MAAOV,EACPW,UAAQ,EACRC,KAAK,SACLC,KAAK,OACLC,IAAI,IACJC,IAAI,WACJC,WAAS,EACTC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBjB,EAAUiB,EAAOR,WAGnD,2BAAOJ,UAAU,eACb,0BAAMA,UAAU,cAAhB,4CACA,4BACIW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBf,EAAkBe,EAAOR,QACnDA,MAAOR,GAEP,iCACA,uCACA,uCACA,yCAGR,2BAAOI,UAAU,eACb,0BAAMA,UAAU,cAAhB,yCACA,4BACIW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBb,EAAoBa,EAAOR,QACrDA,MAAON,GAEP,iCACA,uCACA,uCACA,yCAGR,4BAAQE,UAAU,gBAAlB,gBC/CDa,G,MAJA,kBACX,wBAAIb,UAAU,UAAd,0BCQWc,G,MATC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OACZ,yBAAKhB,UAAU,WACVe,EADL,IAEI,uBAAGf,UAAU,sBAAb,cACe,gCAASgB,EAAYC,QAAQ,QCErCC,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,0BAAMnB,UAAU,aACXmB,KC8CMC,MA7Cf,WAAgB,IAAD,EACyB3B,mBAAS,IADlC,mBACNuB,EADM,KACOK,EADP,KAkCb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEL,aAAcA,EACdD,KAAM,kBAAC,EAAD,CAAMvB,gBAlCM,SAACE,EAAQE,EAAgBE,GAC/C,IAAIwB,EAAY,GACZC,EAAiB,GACrB,OAAQ3B,GACN,IAAK,MACH0B,EARW,EAQC5B,EACZ,MACF,IAAK,MACH4B,EAVW,OAUC5B,EACZ,MACF,IAAK,MACH4B,EAZW,OAYC5B,EAIhB,OAAQI,GACN,IAAK,MACHyB,EAAiBD,EApBN,EAqBX,MACF,IAAK,MACHC,EAAiBD,EAtBN,OAuBX,MACF,IAAK,MACHC,EAAiBD,EAxBN,OA2BfD,EAAeE,UCzBCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.769a3485.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ calculateResult }) => {\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [actualCurrency, setActualCurrency] = useState(\"\");\r\n    const [expectedCurrency, setExpectedCurrency] = useState(\"\");\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        calculateResult(+amount, actualCurrency, expectedCurrency);\r\n        setAmount(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit} >\r\n            <fieldset className=\"form__fieldset\">\r\n                <legend className=\"form__legend\">Wypełnij dane:</legend>\r\n                <label className=\"form__label\">\r\n                    <span className=\"form__text\">Podaj kwotę: </span>\r\n                    <input\r\n                        value={amount}\r\n                        required\r\n                        type=\"number\"\r\n                        step=\"0.01\"\r\n                        min=\"5\"\r\n                        max=\"10000000\"\r\n                        autoFocus\r\n                        onChange={({ target }) => setAmount(target.value)}\r\n                    />\r\n                </label>\r\n                <label className=\"form__label\">\r\n                    <span className=\"form__text\">Podaj walutę początkową: </span>\r\n                    <select\r\n                        onChange={({ target }) => setActualCurrency(target.value)}\r\n                        value={actualCurrency}\r\n                    >\r\n                        <option></option>\r\n                        <option>PLN</option>\r\n                        <option>EUR</option>\r\n                        <option>USD</option>\r\n                    </select>\r\n                </label>\r\n                <label className=\"form__label\">\r\n                    <span className=\"form__text\">Podaj walutę końcową: </span>\r\n                    <select\r\n                        onChange={({ target }) => setExpectedCurrency(target.value)}\r\n                        value={expectedCurrency}\r\n                    >\r\n                        <option></option>\r\n                        <option>PLN</option>\r\n                        <option>EUR</option>\r\n                        <option>USD</option>\r\n                    </select>\r\n                </label>\r\n                <button className=\"form__button\">Przelicz</button>\r\n            </fieldset>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = () => (\r\n    <h1 className=\"header\">Kantor wymiany walut</h1>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ body, finalResult }) => (\r\n    <div className=\"section\">\r\n        {body};\r\n        <p className=\"section__paragraph\">\r\n            Otrzymasz: <strong>{finalResult.toFixed(2)}</strong>\r\n        </p>\r\n    </div>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport Header from \"./Header\";\nimport Section from \"./Section\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [finalResult, setFinalResult] = useState(\"\");\n  const PLN_rate = 1;\n  const EUR_rate = 4.4771;\n  const USD_rate = 3.9177;\n  const calculateResult = (amount, actualCurrency, expectedCurrency) => {\n    let PLNAmount = \"\";\n    let expectedAmount = \"\";\n    switch (actualCurrency) {\n      case \"PLN\":\n        PLNAmount = amount * PLN_rate;\n        break;\n      case \"EUR\":\n        PLNAmount = amount * EUR_rate;\n        break;\n      case \"USD\":\n        PLNAmount = amount * USD_rate;\n        break;\n    }\n\n    switch (expectedCurrency) {\n      case \"PLN\":\n        expectedAmount = PLNAmount / PLN_rate;\n        break;\n      case \"EUR\":\n        expectedAmount = PLNAmount / EUR_rate;\n        break;\n      case \"USD\":\n        expectedAmount = PLNAmount / USD_rate;\n        break;\n    }\n    setFinalResult(expectedAmount);\n  };\n\n  return (\n    <Container>\n      <Header />\n      <Section\n        finalResult={+finalResult}\n        body={<Form calculateResult={calculateResult} />}\n      />\n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}